#!/bin/bash

# configure.sh - Configuration script for Python package settings
# Author: laugesen11
# Date: 2025-07-07

set -e  # Exit on any error

# Configuration file name
CONFIG_FILE="config.proj"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to show help/usage
show_help() {
    cat << EOF
Usage: $0 [OPTIONS]

Configure Python package settings by setting or replacing values in $CONFIG_FILE

OPTIONS:
    -h, --help                  Show this help message
    -p, --package-name NAME     Set the package name
    -a, --author-name NAME      Set the author's full name
    -e, --author-email EMAIL    Set the author's email address
    -g, --git-url URL           Set the GitHub URL for the package
    -d, --description DESC      Set the package description
    -f, --file FILE             Use alternative configuration file (default: $CONFIG_FILE)
    -s, --show                  Show current configuration values
    -i, --interactive           Run in interactive mode
    --reset                     Reset configuration file with empty values

EXAMPLES:
    $0 -p "my-package" -a "John Doe" -e "john@example.com"
    $0 --package-name "awesome-tool" --description "An awesome Python tool"
    $0 --interactive            # Run interactive configuration
    $0 --show                   # Display current settings
    $0 --reset                  # Reset all values

NOTES:
    - Values with spaces should be quoted
    - If the configuration file doesn't exist, it will be created
    - Existing values will be updated, new ones will be added
    - Use --interactive mode for guided setup

EOF
}

# Function to validate email format
validate_email() {
    local email="$1"
    if [[ ! "$email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        return 1
    fi
    return 0
}

# Function to validate URL format
validate_url() {
    local url="$1"
    if [[ ! "$url" =~ ^https?://[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}(/.*)?$ ]]; then
        return 1
    fi
    return 0
}

# Function to read current configuration
read_config() {
    if [[ -f "$CONFIG_FILE" ]]; then
        # Source the config file to get current values
        source "$CONFIG_FILE" 2>/dev/null || true
    fi
}

# Function to update or add a configuration value
update_config() {
    local key="$1"
    local value="$2"
    
    # Escape special characters in value for sed
    local escaped_value=$(printf '%s\n' "$value" | sed 's/[[\.*^$()+?{|]/\\&/g')
    
    # Create config file if it doesn't exist
    if [[ ! -f "$CONFIG_FILE" ]]; then
        touch "$CONFIG_FILE"
    fi
    
    # Check if key exists in file
    if grep -q "^${key}=" "$CONFIG_FILE"; then
        # Update existing key
        sed -i'.bak' "s/^${key}=.*/${key}=\"${escaped_value}\"/" $CONFIG_FILE
        print_info "Updated ${key}"
    else
        # Add new key
        echo "${key}=\"${value}\"" >> "$CONFIG_FILE"
        print_info "Added ${key}"
    fi
}

# Function to display current configuration
show_config() {
    if [[ ! -f "$CONFIG_FILE" ]]; then
        print_warning "Configuration file '$CONFIG_FILE' does not exist"
        return 1
    fi
    
    print_info "Current configuration in '$CONFIG_FILE':"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # Read and display each configuration value
    read_config
    
    printf "%-15s: %s\n" "Package Name" "${PACKAGE_NAME:-<not set>}"
    printf "%-15s: %s\n" "Author Name" "${AUTHOR_NAME:-<not set>}"
    printf "%-15s: %s\n" "Author Email" "${AUTHOR_EMAIL:-<not set>}"
    printf "%-15s: %s\n" "Git URL" "${GIT_URL:-<not set>}"
    printf "%-15s: %s\n" "Description" "${DESCRIPTION:-<not set>}"
    
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
}

# Function to reset configuration file
reset_config() {
    cat > "$CONFIG_FILE" << EOF
# Python Package Configuration
# Generated by configure.sh on $(date)

PACKAGE_NAME=""
AUTHOR_NAME=""
AUTHOR_EMAIL=""
GIT_URL=""
DESCRIPTION=""
EOF
    
    print_success "Configuration file '$CONFIG_FILE' has been reset"
}

# Function to run interactive configuration
interactive_config() {
    print_info "Interactive Python Package Configuration"
    echo "Press Enter to keep current values or leave blank"
    echo
    
    # Read current config
    read_config
    
    # Package Name
    echo -n "Package Name [${PACKAGE_NAME:-}]: "
    read -r input_package
    if [[ -n "$input_package" ]]; then
        update_config "PACKAGE_NAME" "$input_package"
    fi
    
    # Author Name
    echo -n "Author Name [${AUTHOR_NAME:-}]: "
    read -r input_author
    if [[ -n "$input_author" ]]; then
        update_config "AUTHOR_NAME" "$input_author"
    fi
    
    # Author Email
    while true; do
        echo -n "Author Email [${AUTHOR_EMAIL:-}]: "
        read -r input_email
        if [[ -z "$input_email" ]]; then
            break
        elif validate_email "$input_email"; then
            update_config "AUTHOR_EMAIL" "$input_email"
            break
        else
            print_error "Invalid email format. Please try again."
        fi
    done
    
    # Git URL
    while true; do
        echo -n "Git URL [${GIT_URL:-}]: "
        read -r input_url
        if [[ -z "$input_url" ]]; then
            break
        elif validate_url "$input_url"; then
            update_config "GIT_URL" "$input_url"
            break
        else
            print_error "Invalid URL format. Please use http:// or https://"
        fi
    done
    
    # Description
    echo -n "Package Description [${DESCRIPTION:-}]: "
    read -r input_description
    if [[ -n "$input_description" ]]; then
        update_config "DESCRIPTION" "$input_description"
    fi
    
    echo
    print_success "Interactive configuration complete!"
    show_config
}

# Function to validate required arguments
validate_arguments() {
    local has_error=false
    
    # Validate email if provided
    if [[ -n "$AUTHOR_EMAIL_INPUT" ]] && ! validate_email "$AUTHOR_EMAIL_INPUT"; then
        print_error "Invalid email format: $AUTHOR_EMAIL_INPUT"
        has_error=true
    fi
    
    # Validate URL if provided
    if [[ -n "$GIT_URL_INPUT" ]] && ! validate_url "$GIT_URL_INPUT"; then
        print_error "Invalid URL format: $GIT_URL_INPUT"
        has_error=true
    fi
    
    if [[ "$has_error" == true ]]; then
        exit 1
    fi
}

# Main function
main() {
    local package_name=""
    local author_name=""
    local author_email=""
    local git_url=""
    local description=""
    local show_only=false
    local interactive=false
    local reset_only=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -p|--package-name)
                if [[ -z "$2" ]]; then
                    print_error "Option $1 requires an argument"
                    exit 1
                fi
                package_name="$2"
                shift 2
                ;;
            -a|--author-name)
                if [[ -z "$2" ]]; then
                    print_error "Option $1 requires an argument"
                    exit 1
                fi
                author_name="$2"
                shift 2
                ;;
            -e|--author-email)
                if [[ -z "$2" ]]; then
                    print_error "Option $1 requires an argument"
                    exit 1
                fi
                author_email="$2"
                AUTHOR_EMAIL_INPUT="$2"
                shift 2
                ;;
            -g|--git-url)
                if [[ -z "$2" ]]; then
                    print_error "Option $1 requires an argument"
                    exit 1
                fi
                git_url="$2"
                GIT_URL_INPUT="$2"
                shift 2
                ;;
            -d|--description)
                if [[ -z "$2" ]]; then
                    print_error "Option $1 requires an argument"
                    exit 1
                fi
                description="$2"
                shift 2
                ;;
            -f|--file)
                if [[ -z "$2" ]]; then
                    print_error "Option $1 requires an argument"
                    exit 1
                fi
                CONFIG_FILE="$2"
                shift 2
                ;;
            -s|--show)
                show_only=true
                shift
                ;;
            -i|--interactive)
                interactive=true
                shift
                ;;
            --reset)
                reset_only=true
                shift
                ;;
            *)
                print_error "Unknown option: $1"
                echo "Use -h or --help for usage information"
                exit 1
                ;;
        esac
    done
    
    # Validate arguments
    validate_arguments
    
    # Handle show only mode
    if [[ "$show_only" == true ]]; then
        show_config
        exit 0
    fi
    
    # Handle reset only mode
    if [[ "$reset_only" == true ]]; then
        reset_config
        exit 0
    fi
    
    # Handle interactive mode
    if [[ "$interactive" == true ]]; then
        interactive_config
        exit 0
    fi
    
    # Check if any configuration values were provided
    if [[ -z "$package_name" && -z "$author_name" && -z "$author_email" && -z "$git_url" && -z "$description" ]]; then
        print_error "No configuration values provided"
        echo "Use -h or --help for usage information"
        exit 1
    fi
    
    print_info "Updating configuration in '$CONFIG_FILE'"
    
    # Update configuration values
    if [[ -n "$package_name" ]]; then
        update_config "PACKAGE_NAME" "$package_name"
    fi
    
    if [[ -n "$author_name" ]]; then
        update_config "AUTHOR_NAME" "$author_name"
    fi
    
    if [[ -n "$author_email" ]]; then
        update_config "AUTHOR_EMAIL" "$author_email"
    fi
    
    if [[ -n "$git_url" ]]; then
        update_config "GIT_URL" "$git_url"
    fi
    
    if [[ -n "$description" ]]; then
        update_config "DESCRIPTION" "$description"
    fi
    
    print_success "Configuration updated successfully!"
    echo
    show_config
}

# Run main function with all arguments
main "$@"
